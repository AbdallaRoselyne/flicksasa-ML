{"changed":true,"filter":false,"title":"another,py","tooltip":"/another,py","value":"import pandas as pd\nimport boto3\nfrom io import StringIO\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sentence_transformers import SentenceTransformer\n\n# Initialize boto3 client with region (if needed)\ns3 = boto3.client('s3', region_name='us-west-2')  # Change 'us-west-2' to the correct region\n\n# S3 bucket and file details\nbucket_name = 'myflicksasa'\nfile_key = 'imdb/combined_processed.csv'\n\n# List buckets to verify access\nresponse = s3.list_buckets()\nbuckets = [bucket['Name'] for bucket in response['Buckets']]\nprint(\"Available buckets:\", buckets)\n\n# Fetch the file from S3\ntry:\n    obj = s3.get_object(Bucket=bucket_name, Key=file_key)\n    data = obj['Body'].read().decode('utf-8')\n\n    # Load the data into a DataFrame\n    movies_df = pd.read_csv(StringIO(data))\n\n    # Preprocess the description column\n    movies_df['description'] = movies_df['description'].fillna('')\n\n    # Initialize and fit the Sentence Transformer\n    print(\"Initializing the Sentence Transformer...\")\n    model = SentenceTransformer('all-MiniLM-L6-v2')\n    embeddings = model.encode(movies_df['description'], show_progress_bar=True)\n    print(\"Embeddings shape:\", embeddings.shape)\n\n    # Compute the cosine similarity matrix\n    print(\"Computing the cosine similarity matrix...\")\n    cosine_sim = cosine_similarity(embeddings, embeddings)\n    print(\"Cosine similarity matrix shape:\", cosine_sim.shape)\n\n    # Strip prefixes from movie titles\n    movies_df['clean_title'] = movies_df['title'].str.replace(r'^\\d+\\.\\s*', '', regex=True)\n\n    # Create a reverse map of indices and cleaned movie titles\n    indices = pd.Series(movies_df.index, index=movies_df['clean_title']).drop_duplicates()\n\n    # Print the first few cleaned movie titles to verify\n    print(\"Available movie titles:\")\n    print(movies_df['clean_title'].head(20))\n\n    # Function to get movie recommendations based on description similarity\n    def get_recommendations(title, cosine_sim=cosine_sim):\n        print(f\"Getting recommendations for: {title}\")\n        \n        # Check if the movie title exists in the dataset\n        if title not in indices:\n            print(\"Movie title not found in the dataset.\")\n            return []\n        \n        # Get the index of the movie that matches the title\n        idx = indices[title]\n\n        # Get the pairwise similarity scores of all movies with that movie\n        sim_scores = list(enumerate(cosine_sim[idx]))\n\n        # Sort the movies based on the similarity scores\n        sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n        # Get the scores of the 10 most similar movies\n        sim_scores = sim_scores[1:11]\n\n        # Get the movie indices\n        movie_indices = [i[0] for i in sim_scores]\n\n        # Return the top 10 most similar movies\n        recommendations = movies_df['clean_title'].iloc[movie_indices]\n        print(\"Recommendations found:\")\n        print(recommendations)\n        return recommendations\n\n    # Example: Get recommendations for a specific movie\n    user_favorite_movie = 'IF'  # Change to a valid movie title\n    recommendations = get_recommendations(user_favorite_movie)\n\n    # Display the recommendations\n    print(\"\\nTop 10 movie recommendations:\")\n    for i, movie in enumerate(recommendations, 1):\n        print(f\"{i}. {movie}\")\n\nexcept s3.exceptions.NoSuchBucket:\n    print(f\"Error: The bucket '{bucket_name}' does not exist.\")\n","undoManager":{"mark":-2,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":91,"column":0},"action":"insert","lines":["import pandas as pd","import boto3","from io import StringIO","from sklearn.metrics.pairwise import cosine_similarity","from sentence_transformers import SentenceTransformer","","# Initialize boto3 client with region (if needed)","s3 = boto3.client('s3', region_name='us-west-2')  # Change 'us-west-2' to the correct region","","# S3 bucket and file details","bucket_name = 'myflicksasa'","file_key = 'imdb/combined_processed.csv'","","# List buckets to verify access","response = s3.list_buckets()","buckets = [bucket['Name'] for bucket in response['Buckets']]","print(\"Available buckets:\", buckets)","","# Fetch the file from S3","try:","    obj = s3.get_object(Bucket=bucket_name, Key=file_key)","    data = obj['Body'].read().decode('utf-8')","","    # Load the data into a DataFrame","    movies_df = pd.read_csv(StringIO(data))","","    # Preprocess the description column","    movies_df['description'] = movies_df['description'].fillna('')","","    # Initialize and fit the Sentence Transformer","    print(\"Initializing the Sentence Transformer...\")","    model = SentenceTransformer('all-MiniLM-L6-v2')","    embeddings = model.encode(movies_df['description'], show_progress_bar=True)","    print(\"Embeddings shape:\", embeddings.shape)","","    # Compute the cosine similarity matrix","    print(\"Computing the cosine similarity matrix...\")","    cosine_sim = cosine_similarity(embeddings, embeddings)","    print(\"Cosine similarity matrix shape:\", cosine_sim.shape)","","    # Strip prefixes from movie titles","    movies_df['clean_title'] = movies_df['title'].str.replace(r'^\\d+\\.\\s*', '', regex=True)","","    # Create a reverse map of indices and cleaned movie titles","    indices = pd.Series(movies_df.index, index=movies_df['clean_title']).drop_duplicates()","","    # Print the first few cleaned movie titles to verify","    print(\"Available movie titles:\")","    print(movies_df['clean_title'].head(20))","","    # Function to get movie recommendations based on description similarity","    def get_recommendations(title, cosine_sim=cosine_sim):","        print(f\"Getting recommendations for: {title}\")","        ","        # Check if the movie title exists in the dataset","        if title not in indices:","            print(\"Movie title not found in the dataset.\")","            return []","        ","        # Get the index of the movie that matches the title","        idx = indices[title]","","        # Get the pairwise similarity scores of all movies with that movie","        sim_scores = list(enumerate(cosine_sim[idx]))","","        # Sort the movies based on the similarity scores","        sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)","","        # Get the scores of the 10 most similar movies","        sim_scores = sim_scores[1:11]","","        # Get the movie indices","        movie_indices = [i[0] for i in sim_scores]","","        # Return the top 10 most similar movies","        recommendations = movies_df['clean_title'].iloc[movie_indices]","        print(\"Recommendations found:\")","        print(recommendations)","        return recommendations","","    # Example: Get recommendations for a specific movie","    user_favorite_movie = 'IF'  # Change to a valid movie title","    recommendations = get_recommendations(user_favorite_movie)","","    # Display the recommendations","    print(\"\\nTop 10 movie recommendations:\")","    for i, movie in enumerate(recommendations, 1):","        print(f\"{i}. {movie}\")","","except s3.exceptions.NoSuchBucket:","    print(f\"Error: The bucket '{bucket_name}' does not exist.\")",""],"id":1}]]},"ace":{"folds":[],"scrolltop":969,"scrollleft":0,"selection":{"start":{"row":91,"column":0},"end":{"row":91,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":68,"state":"start","mode":"ace/mode/text"}},"timestamp":1721841733634}