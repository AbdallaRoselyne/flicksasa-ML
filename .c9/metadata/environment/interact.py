{"filter":false,"title":"interact.py","tooltip":"/interact.py","undoManager":{"mark":8,"position":8,"stack":[[{"start":{"row":0,"column":0},"end":{"row":45,"column":0},"action":"insert","lines":["import pandas as pd","import random","import boto3","from io import StringIO","","# Load user profiles from the CSV (assuming it's stored locally or already loaded in memory)","user_profiles_df = pd.read_csv('simulated_user_profiles.csv')","","# Load movie data (replace with your actual movie dataset path)","movies_df = pd.read_csv('preprocessed_imdb_movies.csv')","","# Ensure movie dataset has a unique identifier for each movie","movies_df['movieId'] = range(1, len(movies_df) + 1)","","# Function to generate a user interaction","def generate_user_interaction(user_id, movie_id):","    return {","        \"userId\": user_id,","        \"movieId\": movie_id,","        \"rating\": random.randint(1, 5)  # Random rating between 1 and 5","    }","","# Generate user interaction data","interaction_data = []","for _, user_profile in user_profiles_df.iterrows():","    user_id = user_profile['user_id']","    for _ in range(random.randint(10, 20)):  # Each user rates between 10 to 20 movies","        movie_id = random.choice(movies_df['movieId'].tolist())","        interaction_data.append(generate_user_interaction(user_id, movie_id))","","# Convert to DataFrame","interaction_data_df = pd.DataFrame(interaction_data)","","# Save interaction data to CSV in memory","csv_buffer = StringIO()","interaction_data_df.to_csv(csv_buffer, index=False)","","# Upload to S3","s3 = boto3.client('s3')","s3_bucket_name = 'your-s3-bucket-name'","s3_file_path = 'imdb/simulated_user_interactions.csv'","","s3.put_object(Bucket=s3_bucket_name, Key=s3_file_path, Body=csv_buffer.getvalue())","","print(\"Simulated user interaction data has been saved to S3 bucket.\")",""],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":45,"column":0},"action":"remove","lines":["import pandas as pd","import random","import boto3","from io import StringIO","","# Load user profiles from the CSV (assuming it's stored locally or already loaded in memory)","user_profiles_df = pd.read_csv('simulated_user_profiles.csv')","","# Load movie data (replace with your actual movie dataset path)","movies_df = pd.read_csv('preprocessed_imdb_movies.csv')","","# Ensure movie dataset has a unique identifier for each movie","movies_df['movieId'] = range(1, len(movies_df) + 1)","","# Function to generate a user interaction","def generate_user_interaction(user_id, movie_id):","    return {","        \"userId\": user_id,","        \"movieId\": movie_id,","        \"rating\": random.randint(1, 5)  # Random rating between 1 and 5","    }","","# Generate user interaction data","interaction_data = []","for _, user_profile in user_profiles_df.iterrows():","    user_id = user_profile['user_id']","    for _ in range(random.randint(10, 20)):  # Each user rates between 10 to 20 movies","        movie_id = random.choice(movies_df['movieId'].tolist())","        interaction_data.append(generate_user_interaction(user_id, movie_id))","","# Convert to DataFrame","interaction_data_df = pd.DataFrame(interaction_data)","","# Save interaction data to CSV in memory","csv_buffer = StringIO()","interaction_data_df.to_csv(csv_buffer, index=False)","","# Upload to S3","s3 = boto3.client('s3')","s3_bucket_name = 'your-s3-bucket-name'","s3_file_path = 'imdb/simulated_user_interactions.csv'","","s3.put_object(Bucket=s3_bucket_name, Key=s3_file_path, Body=csv_buffer.getvalue())","","print(\"Simulated user interaction data has been saved to S3 bucket.\")",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":53,"column":0},"action":"insert","lines":["import pandas as pd","import random","import boto3","from io import StringIO","","# Initialize the S3 client","s3 = boto3.client('s3')","s3_bucket_name = 'your-s3-bucket-name'","user_profiles_file_path = 'imdb/simulated_user_profiles.csv'","movies_file_path = 'imdb/preprocessed_imdb_movies.csv'","interaction_data_file_path = 'imdb/simulated_user_interactions.csv'","","# Function to read CSV from S3","def read_csv_from_s3(bucket_name, file_path):","    obj = s3.get_object(Bucket=bucket_name, Key=file_path)","    return pd.read_csv(obj['Body'])","","# Load user profiles from S3","user_profiles_df = read_csv_from_s3(s3_bucket_name, user_profiles_file_path)","","# Load movie data from S3","movies_df = read_csv_from_s3(s3_bucket_name, movies_file_path)","","# Ensure movie dataset has a unique identifier for each movie","movies_df['movieId'] = range(1, len(movies_df) + 1)","","# Function to generate a user interaction","def generate_user_interaction(user_id, movie_id):","    return {","        \"userId\": user_id,","        \"movieId\": movie_id,","        \"rating\": random.randint(1, 5)  # Random rating between 1 and 5","    }","","# Generate user interaction data","interaction_data = []","for _, user_profile in user_profiles_df.iterrows():","    user_id = user_profile['user_id']","    for _ in range(random.randint(10, 20)):  # Each user rates between 10 to 20 movies","        movie_id = random.choice(movies_df['movieId'].tolist())","        interaction_data.append(generate_user_interaction(user_id, movie_id))","","# Convert to DataFrame","interaction_data_df = pd.DataFrame(interaction_data)","","# Save interaction data to CSV in memory","csv_buffer = StringIO()","interaction_data_df.to_csv(csv_buffer, index=False)","","# Upload to S3","s3.put_object(Bucket=s3_bucket_name, Key=interaction_data_file_path, Body=csv_buffer.getvalue())","","print(\"Simulated user interaction data has been saved to S3 bucket.\")",""]}],[{"start":{"row":7,"column":35},"end":{"row":7,"column":36},"action":"remove","lines":["m"],"id":3},{"start":{"row":7,"column":34},"end":{"row":7,"column":35},"action":"remove","lines":["a"]},{"start":{"row":7,"column":33},"end":{"row":7,"column":34},"action":"remove","lines":["n"]},{"start":{"row":7,"column":32},"end":{"row":7,"column":33},"action":"remove","lines":["-"]},{"start":{"row":7,"column":31},"end":{"row":7,"column":32},"action":"remove","lines":["t"]},{"start":{"row":7,"column":30},"end":{"row":7,"column":31},"action":"remove","lines":["e"]},{"start":{"row":7,"column":29},"end":{"row":7,"column":30},"action":"remove","lines":["k"]},{"start":{"row":7,"column":28},"end":{"row":7,"column":29},"action":"remove","lines":["c"]},{"start":{"row":7,"column":27},"end":{"row":7,"column":28},"action":"remove","lines":["u"]},{"start":{"row":7,"column":26},"end":{"row":7,"column":27},"action":"remove","lines":["b"]}],[{"start":{"row":7,"column":25},"end":{"row":7,"column":26},"action":"remove","lines":["-"],"id":4},{"start":{"row":7,"column":24},"end":{"row":7,"column":25},"action":"remove","lines":["3"]},{"start":{"row":7,"column":23},"end":{"row":7,"column":24},"action":"remove","lines":["s"]}],[{"start":{"row":7,"column":23},"end":{"row":7,"column":24},"action":"remove","lines":["e"],"id":5},{"start":{"row":7,"column":22},"end":{"row":7,"column":23},"action":"remove","lines":["-"]},{"start":{"row":7,"column":21},"end":{"row":7,"column":22},"action":"remove","lines":["r"]},{"start":{"row":7,"column":20},"end":{"row":7,"column":21},"action":"remove","lines":["u"]},{"start":{"row":7,"column":19},"end":{"row":7,"column":20},"action":"remove","lines":["o"]},{"start":{"row":7,"column":18},"end":{"row":7,"column":19},"action":"remove","lines":["y"]}],[{"start":{"row":7,"column":18},"end":{"row":7,"column":19},"action":"insert","lines":["m"],"id":6},{"start":{"row":7,"column":19},"end":{"row":7,"column":20},"action":"insert","lines":["y"]},{"start":{"row":7,"column":20},"end":{"row":7,"column":21},"action":"insert","lines":["f"]},{"start":{"row":7,"column":21},"end":{"row":7,"column":22},"action":"insert","lines":["l"]},{"start":{"row":7,"column":22},"end":{"row":7,"column":23},"action":"insert","lines":["i"]},{"start":{"row":7,"column":23},"end":{"row":7,"column":24},"action":"insert","lines":["c"]},{"start":{"row":7,"column":24},"end":{"row":7,"column":25},"action":"insert","lines":["k"]}],[{"start":{"row":7,"column":25},"end":{"row":7,"column":26},"action":"insert","lines":["s"],"id":7},{"start":{"row":7,"column":26},"end":{"row":7,"column":27},"action":"insert","lines":["a"]},{"start":{"row":7,"column":27},"end":{"row":7,"column":28},"action":"insert","lines":["s"]},{"start":{"row":7,"column":28},"end":{"row":7,"column":29},"action":"insert","lines":["a"]}],[{"start":{"row":9,"column":25},"end":{"row":9,"column":49},"action":"remove","lines":["preprocessed_imdb_movies"],"id":8},{"start":{"row":9,"column":25},"end":{"row":9,"column":26},"action":"insert","lines":["c"]},{"start":{"row":9,"column":26},"end":{"row":9,"column":27},"action":"insert","lines":["o"]},{"start":{"row":9,"column":27},"end":{"row":9,"column":28},"action":"insert","lines":["m"]},{"start":{"row":9,"column":28},"end":{"row":9,"column":29},"action":"insert","lines":["b"]}],[{"start":{"row":9,"column":18},"end":{"row":9,"column":34},"action":"remove","lines":[" 'imdb/comb.csv'"],"id":9},{"start":{"row":9,"column":18},"end":{"row":9,"column":48},"action":"insert","lines":[" 'imdb/combined_processed.csv'"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":9,"column":48},"end":{"row":9,"column":48},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":201,"mode":"ace/mode/python"}},"timestamp":1721335514404,"hash":"5d0870e1be3c7cc6f411c6bd84ae119342ba8a84"}